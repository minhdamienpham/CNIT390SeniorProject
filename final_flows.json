[{"id":"259f931e.740a8c","type":"tab","label":"sensor2relay","disabled":false,"info":""},{"id":"688ad97d.a61da8","type":"serial out","z":"259f931e.740a8c","name":"","serial":"ce9325b1.2c2a58","x":1060,"y":300,"wires":[]},{"id":"aa215b99.df4ae8","type":"serial in","z":"259f931e.740a8c","name":"","serial":"ce9325b1.2c2a58","x":1050,"y":240,"wires":[["1b7d0a95.d7ee75"]]},{"id":"1b7d0a95.d7ee75","type":"debug","z":"259f931e.740a8c","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1250,"y":240,"wires":[]},{"id":"b8951764.428758","type":"mqtt in","z":"259f931e.740a8c","name":"","topic":"#","qos":"1","datatype":"json","broker":"5ad721b1e0751757","nl":false,"rap":true,"rh":0,"x":110,"y":240,"wires":[["7b7bb101.218a4"]]},{"id":"e5cd83a8.7a8c1","type":"function","z":"259f931e.740a8c","name":"json parsing","func":"var obj = JSON.parse(msg.payload);\nvar pay = { payload : obj.uplink_message.frm_payload};\n\nreturn pay;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":330,"y":240,"wires":[["5791a077.11d93"]]},{"id":"5791a077.11d93","type":"base64","z":"259f931e.740a8c","name":"","action":"b64","property":"payload","x":460,"y":320,"wires":[["1e98eb16.e16c95","ef80846e.63a158"]]},{"id":"aca4ee3e.4484c","type":"python-function","z":"259f931e.740a8c","name":"devised-algorithm","func":"## node-red\nimport base64\nimport time\n\nprint(\"msg: \", msg)\nnewMsg = msg['payload']\ndecoded_value = newMsg.encode('utf-8')\nprint(\"decoded: \", decoded_value)\nprint(type(decoded_value))\n\n#아두이노에서 센서값 체크해서 stable구간에 모두 포함이면 안보내고 하나라도 넘어가면 \n#클라우드로 센서 데이터를 보내는거로\n\nf = open(\"/home/pi/Desktop/prepower.txt\", 'r')\npre_power = f.readlines()\nprint(\"file power: \", pre_power)\nprint(type(pre_power))\nf.close()\n\npower2 = int(pre_power[0])\nprint(\"power2 type : \", type(power2))\nprint(\"power2: \", power2)\n\n'''variable for DB'''\npower = power2\n#power = int(power)\n\namount_battery = [0, 0, 0, 0]  # db에 넣을 각각 배터리 소모량\nremained_battery = [0, 0, 0, 0]  # 각 relay가 실행될 때, 남은 배터리양 => 각각 그때의 power 변수로 선언함\ndb_level = []  # 요청한 level\n\n# required power for irrigation 50inch 100inch 200inch 400inch\npower_consumption = [[1, 2, 3],[2, 3, 4], [3, 4, 5], [5, 6, 7]]\n\n\n# soil moisture value 가져오기 => [355, 200, 130, 200]\n# soil moisture value array\n# print(\"Enter the moisture value: \")\n# moisture_value = list(map(int, input().split()))\nstring_list = list(decoded_value.split())\nprint(\"string_list: \", string_list)\nstring_list.pop(4)\nmoisture_value = map(int, string_list)\nprint('moisture_value: ', type(moisture_value[0]))\n\n# calculate level\ndef calculate_level(moisture_value):\n  level = []\n  for value in moisture_value:\n    if value > 395:\n      level.append(3)\n    elif value > 370:\n      level.append(2)\n    elif value > 355:\n      level.append(1)\n    else:\n      level.append(0)\n  return level\n\n# level 계산 => [2, 3, 0, 1]\n# print(\"level: \", calculate_level(moisture_value))\nlevel = calculate_level(moisture_value)\n\n# 실제 relay level 계산\ndef irrigate(power, level, amount_battery, remained_battery):\n  final_level = [0, 0, 0, 0]\n  # print(\"level: \", level)\n\n  # predict power consumption\n  expected_power = []\n  for i in range(len(level)):\n    if level[i] != 0:\n      expected_power.append(power_consumption[i][level[i]-1])\n    else: \n      expected_power.append(0)\n\n  # print(\"expected power: \", expected_power)\n\n  # calculate power consumption\n  total_power = 0\n  for p in expected_power:\n    total_power = total_power + p\n\n  #print(total_power)\n\n  #1. power sufficient\n  if total_power < power:\n    tmp_power = power\n    power = power - total_power #power remain update\n    final_level = level\n    amount_battery = expected_power ## for DB\n    for j in range(4):\n      remained_battery[j] = tmp_power - expected_power[j]\n      tmp_power = remained_battery[j]\n    print(\"expected: \", expected_power)\n    print(\"amount_battery: \", amount_battery)\n    print(\"remained_battery: \", remained_battery)\n    return final_level, amount_battery, remained_battery\n\n  else: #2. power not sufficient\n    #check the power for each\n    for i in range(len(expected_power)):\n      if power < expected_power[i]:\n        level[i] = 0\n        expected_power[i] = 0\n        amount_battery[i] = 0  # DB\n    \n    if sum(level) == 0:\n      return [-1]\n      \n    index = [0, 1, 2, 3]\n    while power > 0:\n      indices = [index for index, value in enumerate(level) if value == max(level)]\n      #print(\"indices: \", indices)\n\n      for i in indices:\n        print(\"<<test start>>\")\n        if power >= expected_power[i]:\n          print(\"power: \", type(power))\n          print(\"expected_power: \", type(expected_power[i]))\n          print(\"remained_battery: \", type(remained_battery[i]))\n          print(\"final_level: \", type(final_level[i]))\n          print(\"level: \", type(level[i]))\n          \n          amount_battery[i] = expected_power[i]\n          power = power - expected_power[i]\n          remained_battery[i] = power  # DB\n          final_level[i] = level[i]\n          level[i] = 0\n          #print(\"power: \", power)\n        else:\n          power = 0  \n      print(\"test7\")\n      #remain = list(set(index) - set(indices))\n      print(\"test8\")\n      #print(\"remain: \", remain)\n    \n    # print(\"final_level: \", final_level)\n    # print(\"amount_battery: \", amount_battery)\n    # print(\"remained_battert: \", remained_battery)\n    print(\"test9\")\n    return final_level, amount_battery, remained_battery\n  \nirrigation, amount_battery, remained_battery = irrigate(power, level, amount_battery, remained_battery)\nprint(irrigation)\ndb_level = irrigation  ## DB\n\nirrigation_command = \"\".join(map(str, irrigation))\n\nprint(irrigation_command)\nprint(\"test5555\")\n\n\n# message_byte = myMsg.encode('ascii')\n# base64_bytes = base64.b64encode(message_byte)\n# base64_message = base64_bytes.decode('ascii')\n\n# Database(MariaDB)\nirrigation_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time()))\ntmp_msg = \"\"\n\nprint(\"test5555\")\n\n\nfor i in range(4):\n    #if level[i] != 0:\n    tmp_msg = tmp_msg + \"INSERT INTO ex3 (irrigation_time, area, amount_battery, level, remained_battery) VALUES ('\" + irrigation_time + \"','\" + str(i) + \"','\" + str(amount_battery[i]) + \"','\" + str(db_level[i]) + \"','\" + str(remained_battery[i]) +\"');\"\n    print(tmp_msg)\n        \n    f2 = open(\"/home/pi/Desktop/prepower.txt\", 'w')\n    data = str(remained_battery[3])\n    f2.write(data)\n    f2.close()\n    print(\"write: \", data)\n        \nmsg['topic'] = tmp_msg\nmsg['payload'] = irrigation_command\n\n\n\n\nreturn msg","outputs":1,"x":830,"y":400,"wires":[["aa8b844.649fd78","688ad97d.a61da8"]]},{"id":"7b7bb101.218a4","type":"json","z":"259f931e.740a8c","name":"","property":"payload","action":"","pretty":false,"x":210,"y":320,"wires":[["e5cd83a8.7a8c1"]]},{"id":"615ad4d7.a660dc","type":"debug","z":"259f931e.740a8c","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1210,"y":520,"wires":[]},{"id":"aa8b844.649fd78","type":"mysql","z":"259f931e.740a8c","mydb":"7db4a530.baa90c","name":"","x":1050,"y":520,"wires":[["615ad4d7.a660dc"]]},{"id":"953cf5e6.2ce7b8","type":"comment","z":"259f931e.740a8c","name":"DB flow","info":"","x":1030,"y":460,"wires":[]},{"id":"4a3db22c.5fbf0c","type":"mysql","z":"259f931e.740a8c","mydb":"7db4a530.baa90c","name":"","x":810,"y":140,"wires":[["ac6b1836.8db638"]]},{"id":"1e98eb16.e16c95","type":"python-function","z":"259f931e.740a8c","name":"insert-query","func":"## node-red\nimport base64\nimport time\n\nprint(\"msg: \", msg)\nnewMsg = msg['payload']\ndecoded_value = newMsg.encode('utf-8')\nprint(\"decoded: \", decoded_value)\nprint(type(decoded_value))\n\n# soil moisture value array\nstring_list = list(decoded_value.split())\nprint(\"string_list: \", string_list)\nstring_list.pop(4)\nmoisture_value = map(int, string_list)\nprint('moisture_value: ', type(moisture_value[0]))\n\n# Database(MariaDB)\nirrigation_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time()))\ntmp_msg = \"INSERT INTO ex7 (irrigation_time, value0, value1, value2, value3) VALUES ('\" + irrigation_time + \"','\" + str(moisture_value[0]) + \"','\" + str(moisture_value[1]) + \"','\" + str(moisture_value[2]) + \"','\" + str(moisture_value[3]) +\"');\"\n        \nmsg['topic'] = tmp_msg\nmsg['payload'] = '0'\n\nreturn msg\n\n\n","outputs":1,"x":630,"y":140,"wires":[["4a3db22c.5fbf0c"]]},{"id":"23ce15ca.82b74a","type":"comment","z":"259f931e.740a8c","name":"sensor data store","info":"","x":640,"y":80,"wires":[]},{"id":"ac6b1836.8db638","type":"debug","z":"259f931e.740a8c","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":990,"y":140,"wires":[]},{"id":"ef80846e.63a158","type":"delay","z":"259f931e.740a8c","name":"","pauseType":"rate","timeout":"10","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"hour","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":true,"x":630,"y":360,"wires":[["aca4ee3e.4484c"]]},{"id":"ce9325b1.2c2a58","type":"serial-port","serialport":"/dev/ttyACM2","serialbaud":"9600","databits":"8","parity":"none","stopbits":"1","waitfor":"","dtr":"none","rts":"none","cts":"none","dsr":"none","newline":"\\n","bin":"false","out":"char","addchar":"","responsetimeout":"10000"},{"id":"5ad721b1e0751757","type":"mqtt-broker","name":"","broker":"nam1.cloud.thethings.network","port":"1883","clientid":"","usetls":false,"protocolVersion":"4","keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willPayload":"","willMsg":{},"sessionExpiry":""},{"id":"7db4a530.baa90c","type":"MySQLdatabase","name":"","host":"127.0.0.1","port":"3306","db":"experiment","tz":"","charset":"UTF8"}]